#!/usr/bin/env python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# An OpenStack ansible install runner
#

import argparse
import curses
import datetime
import ipaddress
import json
import os
import psutil
import re
import select
import subprocess
import sys
import textwrap
import time
import urlparse

import emitters
import steps


progname = os.path.basename(__file__)
ARGS = None


class Runner(object):
    def __init__(self, screen):
        self.screen = screen

        self.steps = {}

        self.state_path = os.path.expanduser('~/.%s/state.json' % progname)
        if not os.path.exists(os.path.expanduser('~/.%s' % progname)):
            os.mkdir(os.path.expanduser('~/.%s' % progname))

        self.complete = {}
        self.counter = 0
        if os.path.exists(self.state_path):
            with open(self.state_path, 'r') as f:
                state = json.loads(f.read())
                self.complete = state.get('complete', {})
                self.counter = state.get('counter', 0)

    def load_step(self, step):
        self.steps[step.name] = step

    def load_dependancy_chain(self, steps, depends=None):
        depend = depends
        for step in steps:
            step.depends = depend
            depend = step.name
            self.load_step(step)

    def resolve_steps(self):
        if not ARGS.no_curses:
            # Setup curses windows for the steps view
            height, width = self.screen.getmaxyx()
            progress = curses.newwin(3, width, 0, 0)
            progress.border()
            progress.refresh()

            output = curses.newwin(height - 4, width, 3, 0)
            output.scrollok(True)
            output.border()
            output.refresh()
            emitter = emitters.Emitter(progname, output)
        else:
            output = None
            emitter = emitters.SimpleEmitter(progname, output)

        for step_name in self.complete:
            if step_name in self.steps:
                del self.steps[step_name]

        run = [True]
        complete = []

        while len(run) > 0:
            run = []
            complete = []

            for step_name in self.steps:
                step = self.steps[step_name]

                if not step.depends or self.complete.get(step.depends, False):
                    if not ARGS.no_curses:
                        progress.clear()
                        progress.addstr(1, 3, '%s %d steps to run, running %s'
                                        % (datetime.datetime.now(),
                                           len(self.steps),
                                           step_name))
                        progress.border()
                        progress.refresh()

                    run.append(step_name)
                    emitter.clear()
                    emitter.logger('%06d-%s' % (self.counter, step_name))
                    outcome = step.run(emitter, self.screen)
                    self.counter += 1

                    if outcome:
                        self.complete[step_name] = outcome
                        complete.append(step_name)

                    with open(self.state_path, 'w') as f:
                        f.write(json.dumps({'complete': self.complete,
                                            'counter': self.counter},
                                           indent=4, sort_keys=True))

            for step_name in complete:
                del self.steps[step_name]


def stage1_before_anything(r):
    """Things to do before attempting anything."""

    nextsteps = []
    nextsteps.append(
        steps.SimpleCommandStep(
            'apt-daily',
            ('while [ `ps -ef | grep apt.systemd.daily | '
             'grep -vc "grep"` -gt 0 ]; do '
             'echo "Waiting for daily apt run to end"; sleep 10; done')
            )
        )
    return nextsteps


def stage2_user_questions(r):
    """Things we need the user to tell us."""

    nextsteps = []
    nextsteps.append(
        steps.QuestionStep(
            'git-mirror-github',
            'Are you running a local github.com mirror?',
            ('Mirroring github.com speeds up setup on slow and '
             'unreliable networks, but means that you have to '
             'maintain a mirror somewhere on your corporate network. '
             'If you are unsure, just enter "git://github.com" here. '
             'Otherwise, we need an answer in the form of '
             '<protocol>://<server>, for example '
             'git://gitmirror.example.com'),
            'Mirror URL'
            )
        )
    nextsteps.append(
        steps.QuestionStep(
            'git-mirror-openstack',
            'Are you running a local git.openstack.org mirror?',
            ('Mirroring git.openstack.org speeds up setup on slow '
             'and unreliable networks, but means that you have to '
             'maintain a mirror somewhere on your corporate network. '
             'If you are unsure, just enter '
             '"git://git.openstack.org" here. Otherwise, we need an '
             'answer in the form of <protocol>://<server>, for '
             'example git://gitmirror.example.com'),
            'Mirror URL'
            )
        )
    nextsteps.append(
        steps.QuestionStep(
            'osa-branch',
            'What OSA branch (or commit SHA) would you like to use?',
            'Use stable/newton unless you know what you are doing.',
            'OSA branch'
            )
        )
    nextsteps.append(
        steps.QuestionStep(
            'http-proxy',
            'Are you running a local http proxy?',
            ('OSA will download large objects such as LXC base '
             'images. If you have a slow network, or are on a '
             'corporate network which requires a proxy, configure it '
             'here with a URL like http://cache.example.com:3128 . '
             'If you do not use a proxy, please enter "none" here.'),
            'HTTP Proxy'
            )
         )
    nextsteps.append(
        steps.QuestionStep(
            'ironic-ip-block',
            'IP block for Ironic nodes',
            ('We need to know what IP range to use for the neutron network '
             'that Ironic nodes appear on. This block is managed by neutron '
             'so should be separate from your primary netblock. Please '
             'specify this as a CIDR range, for example 192.168.52.0/24.'),
            'Ironic IP Block'
            )
         )
    nextsteps.append(
        steps.QuestionStep(
            'local-cache',
            'Local caching',
            ('Do you locally cache rpc-repo.rackspace.com? If so, we expect '
             'the cache to be in a directory named rpc-repo.rackspace.com '
             'on your cache web server. Please enter the hostname for that '
             'server here. If you do not cache, just enter "none" here.'),
            'Local Cache'
            )
        )
    return nextsteps


def stage3_apt(r):
    """Prepare apt."""

    nextsteps = []
    nextsteps.append(
        steps.SimpleCommandStep('apt-update', 'apt-get update')
        )
    nextsteps.append(
        steps.SimpleCommandStep('apt-upgrade', 'apt-get upgrade -y')
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'apt-dist-upgrade',
            'apt-get dist-upgrade -y'
            )
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'apt-useful',
            'apt-get install -y screen ack-grep git expect lxc'
            )
        )
    return nextsteps


def stage4_checkout_osa(r, **kwargs):
    """Clone and checkout OSA."""

    nextsteps = []
    nextsteps.append(
        steps.SimpleCommandStep(
            'git-clone-osa',
            ('git clone %s/openstack/openstack-ansible '
             '/opt/openstack-ansible'
             % r.complete['git-mirror-openstack'])
            )
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'git-checkout-osa',
            'git checkout %s' % r.complete['osa-branch'],
            **kwargs
            )
        )
    return nextsteps


def stage5_configure_osa_before_bootstrap(r, **kwargs):
    """Do all the configuration we do before bootstrapping."""

    nextsteps = []

    if r.complete['http-proxy'] and r.complete['http-proxy'] != 'none':
        kwargs['env'].update({'http_proxy': r.complete['http-proxy'],
                              'https_proxy': r.complete['http-proxy']})

        # This entry will only last until it is clobbered by ansible
        local_servers = 'localhost,127.0.0.1'
        if r.complete['local-cache'] != 'none':
            local_servers += ',%s' % r.complete['local-cache']
            
        nextsteps.append(
            steps.FileAppendStep(
                'proxy-environment',
                '/etc/environment',
                (('\n\nexport http_proxy="%(proxy)s"\n'
                  'export HTTP_PROXY="%(proxy)s"\n'
                  'export https_proxy="%(proxy)s"\n'
                  'export HTTPS_PROXY="%(proxy)s"\n'
                  'export ftp_proxy="%(proxy)s"\n'
                  'export FTP_PROXY="%(proxy)s"\n'
                  'export no_proxy=%(local)s\n'
                  'export NO_PROXY=%(local)sn')
                 % {'proxy': r.complete['http-proxy'],
                    'local': local_servers}),
                **kwargs)
            )

    replacements = [
        ('(http|https|git)://github.com',
         r.complete['git-mirror-github']),
        ('(http|https|git)://git.openstack.org',
         r.complete['git-mirror-openstack']),
        ]

    if r.complete['local-cache'] != 'none':
        replacements.append(
            ('https://rpc-repo.rackspace.com',
             'http://%s/rpc-repo.rackspace.com' % r.complete['local-cache'])
            )

    nextsteps.append(
        steps.BulkRegexpEditorStep(
            'bulk-edit-osa',
            '/opt/openstack-ansible',
            '.*\.(ini|yml|sh)$',
            replacements,
            **kwargs)
        )

    nextsteps.append(
        steps.BulkRegexpEditorStep(
            'unapply-git-mirrors-for-cgit',
            '/opt/openstack-ansible',
            '.*\.(ini|yml|sh)$',
            [
                ('%s/cgit' % r.complete['git-mirror-openstack'],
                 'https://git.openstack.org/cgit')
            ],
            **kwargs)
        )

    #########################################################################
    # Release specific steps: Newton
    if r.complete['osa-branch'] == 'stable/newton':
        nextsteps.append(
            steps.SimpleCommandStep(
                'fixup-add-ironic-newton',
                ('sed -i -e "/- name: heat.yml.aio/ a \        '
                 '- name: ironic.yml.aio"  tests/bootstrap-aio.yml'),
                **kwargs)
            )
        nextsteps.append(
            steps.RegexpEditorStep(
                'ansible-no-loopback-swap',
                ('/opt/openstack-ansible/tests/roles/bootstrap-host/'
                 'tasks/prepare_loopback_swap.yml'),
                'command: grep /openstack/swap.img /proc/swaps',
                'command: /bin/true',
                **kwargs)
            )

    #########################################################################
    # Release specific steps: Mitaka
    elif r.complete['osa-branch'] == 'stable/mitaka':
        p = urlparse.urlparse(r.complete['git-mirror-github'])
        mirror_host_github = p.netloc.split(':')[0]
        p = urlparse.urlparse(r.complete['git-mirror-openstack'])
        mirror_host_openstack = p.netloc.split(':')[0]

        nextsteps.append(
            steps.SimpleCommandStep(
                'git-mirror-host-keys',
                ('ssh-keyscan -H %s >> /etc/ssh/ssh_known_hosts'
                 % mirror_host_openstack),
                **kwargs)
            )

        if mirror_host_github != mirror_host_openstack:
            nextsteps.append(
                steps.SimpleCommandStep(
                    'git-mirror-host-keys-github',
                    ('ssh-keyscan -H %s >> /etc/ssh/ssh_known_hosts'
                     % mirror_host_github),
                    **kwargs)
                )

        nextsteps.append(
            steps.SimpleCommandStep(
                'fixup-add-ironic-mitaka',
                """sed -i -e '/swift_conf_overrides | default/ a \\    - name: ironic.yml.aio\\n      override: "{{ ironic_conf_overrides | default({}) }}"'  tests/roles/bootstrap-host/tasks/prepare_aio_config.yml""",
                **kwargs)
            )

        nextsteps.append(
            steps.FileAppendStep(
                'group-vars-ironic_service_user_name',
                'playbooks/inventory/group_vars/all.yml',
                '\n\nironic_service_user_name: ironic',
                **kwargs)
            )

    #########################################################################
    nextsteps.append(
        steps.RegexpEditorStep(
            'lxc-cachable-downloads',
            '/usr/share/lxc/templates/lxc-download',
            'wget_wrapper -T 30 -q https?://',
            'wget_wrapper -T 30 -q --no-hsts http://',
            **kwargs)
        )

    nextsteps.append(
        steps.SimpleCommandStep(
            'archive-upper-constraints',
            ('curl https://git.openstack.org/cgit/openstack/requirements/'
             'plain/upper-constraints.txt?id='
             '$(awk \'/requirements_git_install_branch:/ {print $2}\' '
             '/opt/openstack-ansible/playbooks/defaults/repo_packages/'
             'openstack_services.yml) -o ~/.%s/upper-contraints.txt'
             % progname),
            **kwargs)
        )

    return nextsteps


def stage6_bootstrap(r, **kwargs):
    """Bootstrap ansible and AIO."""

    nextsteps = []

    nextsteps.append(
        steps.SimpleCommandStep(
            'bootstrap-ansible',
            './scripts/bootstrap-ansible.sh',
            **kwargs)
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'bootstrap-aio',
            './scripts/bootstrap-aio.sh',
            **kwargs)
        )

    return nextsteps


def stage7_user_variables(r, **kwargs):
    """Configure user variables with all our special things."""

    nextsteps = []

    if r.complete['http-proxy'] and r.complete['http-proxy'] != 'none':
        # This is the more permanent way of doing this
        local_servers = 'localhost,127.0.0.1'
        if r.complete['local-cache'] != 'none':
            local_servers += ',%s' % r.complete['local-cache']

        nextsteps.append(
            steps.FileAppendStep(
                'proxy-environment-via-ansible',
                '/etc/openstack_deploy/user_variables.yml',
                (('\n\n'
                  'no_proxy_env: "%(local)s,{{ '
                  'internal_lb_vip_address }},{{ external_lb_vip_address }},'
                  '{%% for host in groups[\'all_containers\'] %%}'
                  '{{ hostvars[host][\'container_address\'] }}'
                  '{%% if not loop.last %%},{%% endif %%}{%% endfor %%}"\n'
                  'global_environment_variables:\n'
                  '  HTTPS_PROXY: "%(proxy)s"\n'
                  '  https_proxy: "%(proxy)s"\n'
                  '  HTTP_PROXY: "%(proxy)s"\n'
                  '  http_proxy: "%(proxy)s"\n'
                  '  NO_PROXY: "{{ no_proxy_env }}"\n'
                  '  no_proxy: "{{ no_proxy_env }}"')
                 % {'proxy': r.complete['http-proxy'],
                    'local': 'local_servers'}),
                **kwargs)
            )

    nextsteps.append(
        steps.FileAppendStep(
            'osa-debug-mode',
            '/etc/openstack_deploy/user_variables.yml',
            '\n\ndebug: true\nverbose: true',
            **kwargs)
        )

    nextsteps.append(
        steps.FileCreateStep(
            'lxc-hosts-apt-keep-configs',
            '/etc/ansible/roles/lxc_hosts/templates/apt-keep-configs.j2',
            """Dpkg::Options {
   "--force-confdef";
   "--force-confold";
}""",
            **kwargs)
        )

    nextsteps.append(
        steps.SimpleCommandStep(
            'lxc-hosts-apt-keep-configs-enable',
            """sed -i -e '/- name: Update container resolvers/ i \\- name: Always keep modified config files\\n  template:\\n    src: apt-keep-configs.j2\\n    dest: "{{ lxc_container_cache_path }}/{{ item.chroot_path }}/etc/apt/apt.conf.d/apt-keep-configs"\\n  with_items: lxc_container_caches\\n  tags:\\n    - lxc-cache\\n    - lxc-cache-update\\n\\n'  /etc/ansible/roles/lxc_hosts/tasks/lxc_cache_preparation.yml""",
            **kwargs)
        )

    # Release specific steps: Mitaka
    if r.complete['osa-branch'] == 'stable/mitaka':
        nextsteps.append(
            steps.FileAppendStep(
                'enable-ironic',
                '/etc/openstack_deploy/user_variables.yml',
                '\n\nnova_virt_type: ironic\n',
                **kwargs)
            )

    return nextsteps


def stage8_ironic_networking(r, **kwargs):
    """Configure all the special things for ironic networking."""

    nextsteps = []

    nextsteps.append(
        steps.YamlAddElementStep(
            'add-provider-network',
            '/etc/openstack_deploy/openstack_user_config.yml',
            ['global_overrides', 'provider_networks'],
            {'network':
                 {'group_binds': ['neutron_linuxbridge_agent',
                                  'ironic_conductor_container',
                                  'ironic_api_container'],
                  'container_bridge': 'br-ironic',
                  'container_type': 'veth',
                  'container_interface': 'eth12',
                  'type': 'flat',
                  'net_name': 'ironic',
                  'ip_from_q': 'ironic'
                  }
             },
            **kwargs)
        )

    net = ipaddress.ip_network(r.complete['ironic-ip-block'])
    hosts = []
    for h in net.hosts():
        hosts.append(str(h))

    nextsteps.append(
        steps.YamlUpdateDictionaryStep(
            'add-network-cidr',
            '/etc/openstack_deploy/openstack_user_config.yml',
            ['cidr_networks'],
            {'ironic': str(net)},
            **kwargs)
        )

    nextsteps.append(
        steps.YamlAddElementStep(
            'reserve-netblock-start',
            '/etc/openstack_deploy/openstack_user_config.yml',
            ['used_ips'],
            '%s,%s' %(hosts[0], hosts[10]),
            **kwargs)
        )
    nextsteps.append(
        steps.YamlAddElementStep(
            'reserve-netblock-end',
            '/etc/openstack_deploy/openstack_user_config.yml',
            ['used_ips'],
            '%s,%s' %(hosts[-10], hosts[-1]),
            **kwargs)
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'add-ironic-bridge',
            'brctl addbr br-ironic',
            **kwargs)
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'add-ironic-bridge-nic',
            'brctl addif br-ironic eth1',
            **kwargs)
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'add-ironic-bridge-ip',
            'ifconfig br-ironic inet %s up' % hosts[4],
            **kwargs)
        )
    nextsteps.append(
        steps.SimpleCommandStep(
            'add-ironic-interface-ip',
            'ifconfig eth1 inet %s up' % hosts[3],
            **kwargs)
        )

    return nextsteps


def main(screen):
    if not ARGS.no_curses:
        screen.nodelay(False)

    r = Runner(screen)

    r.load_dependancy_chain(stage1_before_anything(r))
    r.resolve_steps()

    r.load_dependancy_chain(stage2_user_questions(r))
    r.resolve_steps()

    r.load_dependancy_chain(stage3_apt(r))
    r.resolve_steps()

    # ANSIBLE_ROLE_FETCH_MODE - git checkout ansible roles, don't use galaxy
    # BOOTSTRAP_OPTS - specify ironic as Nova's virt type
    kwargs = {'cwd': '/opt/openstack-ansible',
              'env': {'ANSIBLE_ROLE_FETCH_MODE': 'git-clone',
                      'BOOTSTRAP_OPTS': 'nova_virt_type=ironic',
                      'ANSIBLE_DEBUG': '1',
                      'ANSIBLE_KEEP_REMOTE_FILES': '1'}}

    r.load_dependancy_chain(stage4_checkout_osa(r, **kwargs))
    r.resolve_steps()

    r.load_dependancy_chain(stage5_configure_osa_before_bootstrap(r, **kwargs))
    r.resolve_steps()

    if not ARGS.configure_only:
        r.load_dependancy_chain(stage6_bootstrap(r, **kwargs))
        r.resolve_steps()

        r.load_dependancy_chain(stage7_user_variables(r, **kwargs))
        r.resolve_steps()

        r.load_dependancy_chain(stage8_ironic_networking(r, **kwargs))
        r.resolve_steps()

        # We also need to re-write git repos in a large number of roles
        replacements = [
            ('(http|https|git)://github.com',
             r.complete['git-mirror-github']),
            ('(http|https|git)://git.openstack.org',
             r.complete['git-mirror-openstack']),
            ('https://mirror.rackspace.com',
             'http://mirror.rackspace.com'),
            (' +checksum:.*', '')
            ]

        if r.complete['local-cache'] != 'none':
            replacements.append(
                ('https://rpc-repo.rackspace.com',
                 'http://%s/rpc-repo.rackspace.com' % r.complete['local-cache'])
                )
            replacements.append(
                ('https://bootstrap.pypa.io/get-pip.py',
                 'http://%s/pip/get-pip.py' % r.complete['local-cache'])
                )

        r.load_step(
            steps.BulkRegexpEditorStep(
                'bulk-edit-roles',
                '/etc/ansible',
                '.*\.(ini|yml)$',
                replacements,
                **kwargs))

        # Release specific steps: Mitaka
        if r.complete['osa-branch'] == 'stable/mitaka':
            r.load_step(
                steps.CopyFileStep(
                    'enable-ironic-environment-mitaka',
                    'etc/openstack_deploy/env.d/ironic.yml',
                    '/etc/openstack_deploy/env.d/ironic.yml',
                    **kwargs)
                )

        r.resolve_steps()

        # The last of the things, run only once
        kwargs['max_attempts'] = 1
        r.load_step(
            steps.AnsibleTimingSimpleCommandStep(
                'run-playbooks',
                './scripts/run-playbooks.sh',
                os.path.expanduser('~/.%s/run-playbook-timings.json'
                                   % progname),
                **kwargs))
        r.resolve_steps()

        kwargs['cwd'] = None

        #####################################################################
        # Release specific steps: Mitaka
        if r.complete['osa-branch'] == 'stable/mitaka':
            r.load_step(
                steps.SimpleCommandStep(
                    'add-ironic-to-nova-venv',
                    './helpers/add-ironic-to-nova-venv',
                    **kwargs)
                )

            r.resolve_steps()

        # Debug output that might be helpful, not scripts are running from
        # ostrich directory
        r.load_dependancy_chain(
            [steps.SimpleCommandStep(
                    'lxc-details',
                    './helpers/lxc-details',
                    **kwargs),
             steps.SimpleCommandStep(
                    'pip-ruin-everything',
                    'pip install python-openstackclient python-ironicclient',
                    **kwargs),
             steps.SimpleCommandStep(
                    'os-cmd-bootstrap',
                    './helpers/os-cmd-bootstrap',
                    **kwargs)
             ])
        r.resolve_steps()

        kwargs['max_attempts'] = 20
        kwargs['failing_step_delay'] = 300
        r.load_dependancy_chain(
            [steps.SimpleCommandStep(
                    'openstack-details',
                    './helpers/openstack-details',
                    **kwargs)
            ])
        r.resolve_steps()

        kwargs['max_attempts'] = 1
        r.load_dependancy_chain(
            [steps.SimpleCommandStep(
                    'setup-neutron-ironic',
                    './helpers/setup-neutron-ironic',
                    **kwargs)
            ])
        r.resolve_steps()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--configure-only', dest='configure_only',
                        default=False, action='store_true',
                        help='Stop after configuring OSA')
    parser.add_argument('--no-screen', dest='no_screen',
                        default=False, action='store_true',
                        help='Do not force me to use screen or tmux')
    parser.add_argument('--no-curses', dest='no_curses',
                        default=False, action='store_true',
                        help='Do not use curses for the UI')
    ARGS, extras = parser.parse_known_args()

    # We really like persistent sessions
    if not ARGS.no_screen:
        if ('TMUX' not in os.environ) and ('STY' not in os.environ):
            sys.exit('Only run ostrich in a screen or tmux session please')

    if ARGS.no_curses:
        main(None)
    else:
        curses.wrapper(main)
